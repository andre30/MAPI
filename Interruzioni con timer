/* abilito clock tim2 ,gpioa e syscfg
configuro pa0 come input aspetto presione user avvio tim2 (bit CEN)
abilito clock
configuro PA0 come input per EXTI0
NVIC->ISER[0] |= 0x1<<6;
Abilito fronte di salita e discesa EXTI0
while(1) [faccio qualcosa]
ISR EXTI0_IRQHandler
Azzero PR0
Pressione User ?
Avvio TIM2 (bit CEN di CR1)
Rilascio USER?
Fermo TIM2
Visualizzo contenuto registro CNT di TIM2
Azzero CNT
*/

#include <stm32f30x.h>


 long int s,ml, ms, count;
void main(void){

RCC->AHBENR |= 1<<21;//abilito porta e
RCC->AHBENR |= 1<<17;//abilito porta a
RCC->APB1ENR |= 0x1; //TIM2
RCC->APB1ENR |= 0x1<<4; //TIM6
RCC->APB2ENR |=1<<0; //abilito syscfg
GPIOE->MODER = 0x55550000;//configuro pin
GPIOA->MODER &= ~ ((unsigned int)3); // INPUT PORTA A

TIM2->ARR= 0xFFFFFFFF;
TIM2->PSC=7199;
TIM2->CNT=0;

SYSCFG->EXTICR[0] |= 0000<<0; //PA0 come input per EXTI0
EXTI->IMR |= 0x00000001; //abilito linea interrupt per EXTI0
NVIC->ISER[0] |= 0x1<<6; //abilito la routine di EXTI0

//abilito fronte di salita e di discesa
EXTI->FTSR |= 0x1;
EXTI->RTSR |= 0x1;
  
  TIM6->CR1 = 0; //Registro di controllo in cui inizialmente disabilito tutte le opzioni su TIM6 (Manuale pag 593)
  TIM6->CR2 = 0; //Serve ad indicare la completa sincronizzazione con i timer interni al dispositivo in base ad un evento (Manuale pag 595)
  TIM6->DIER = 0; //Serve ad abilitare l'interrupt del TIM6. In questo caso non Ë presente nessuna interrupt (Manuale pag 595)
  
  /* Le seguenti due istruzioni sono molto importanti. Il dispositivo va a 72 MHz, cioË compie 72 milioni di istruzioni al secondo. In questa
     esercitazione voglio avere un conteggio al secondo (istruzione al secondo) e il metodo pi˘ rapido Ë dividere per 72 milioni, ma ciÚ non 
     Ë possibile visto che i registri sono a 16 bit. Il PRESCALER serve ad aggiornare la frequenza di conteggio, mentre con ARR indico il valore
     a cui devo arrivare con il conteggio.
  */
  TIM6->PSC = 7199; //Valore di PRESCALER che Ë il valore utile - 1 (se serve 7200, metto 7199) (Manuale pag 598)
  TIM6->ARR = 1000; //Valore a cui devo arrivare con il conteggio (Manuale pag 598)
  TIM6->CR1 |= 1;//Serve ad abiliatare il timer, in particolare il bit0 CEN che abilita il conteggio riferito al timer
  
   int cont = 0;
  while (1){
    //Verifico il bit0 del registro SR se vi Ë stato l'evento di update (in pratica se Ë scattato il secondo) (Manuale pag 596)
    if ((TIM6->SR & 0x1) == 0x1){
        TIM6->SR = 0; //Necessito di abbassare il bit nel registro SR, affinchË possa avvenire il prossimo evento di update
        GPIOE->ODR = (++cont) <<8;
  }
  }
}

void EXTI0_IRQHandler(){
  
  EXTI->PR |= 0x1; //azzero PR0
  
 while(GPIOA->IDR & 0x1 == 0x1){ 
      if((TIM2->CR1 &0x1) != 0x1){
        TIM2->CR1 |= (uint32_t)0x1; //CEN abilito conteggio
        GPIOE->ODR |= (uint32_t)0x0000FF00;
      }
      count=TIM2->CNT;
      s=count/72000000;
      ms=count/72000;
      ml=count/72;
      TIM2->CR1 &=0x0;
    }
 GPIOE->ODR &=0;
  
  
  
  
  
  
}
 //~ 
